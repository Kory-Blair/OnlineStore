@model OnlineStore.Models.Purchase
@{
    ViewBag.Title = "Index";

    var month = (new string[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" })
        .Select(x => new SelectListItem { Text = x, Value = x });


    var date = (new string[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12","13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" })
        .Select(x => new SelectListItem { Text = x, Value = x });

    var day = (new string[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"})
        .Select(x => new SelectListItem { Text = x, Value = x });


    var hour = new List<SelectListItem>();
    for (int i = 0; i < 24; i++)
    {
        hour.Add(new SelectListItem
        {
            Text = i.ToString(),
            Value = i.ToString()
        });
    }
}

<h2>Shopping Cart</h2>
@using (Html.BeginForm())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Item</th>
                <th>Frequency</th>
                <th>Item Price</th>
                <th>Item Total</th>
                
            </tr>
        </thead>
        <tbody>
            
            @if (Model.Service != null)
            {
            <tr>
                <td>
                    @Model.Service.Name
                    @Html.HiddenFor(m => m.Service.Name)
                </td>
                <td>
                    <select name="Recurrence" class="form-control" required>
                        <option value="">Please Choose</option>
                        @foreach (var r in Model.Service.ServiceRecurrences)
                        {
                            if (r.RecurrenceID == Model.RecurrenceId)
                            {
                                <option selected value="@r.RecurrenceID">@r.Recurrence.Name</option>
                            }
                            else
                            {
                                <option value="@r.RecurrenceID">@r.Recurrence.Name</option>
                            }
                        }
                        
                    </select>
                    
                </td>
                <td>
                    <span>@((Model.Service.Price ?? 0).ToString("C"))</span>
                    @Html.HiddenFor(m => m.Service.Price)

                </td>
                <td>
                    

                </td>
            </tr>

            }
        </tbody>
        
        <tfoot>
            <tr>
                <th colspan="3">Item Price</th>
                <th class="calcPrice"> @((Model.Service.Price ?? 0).ToString("C"))</th>

            </tr>
            <tr>
                <th colspan="3">Frequency Savings</th>
               <th class="calcSavings"> @(((Model.Recurrence != null && Model.Recurrence.Savings.HasValue) ? Model.Recurrence.Savings.Value : 0).ToString() + "%")</th>
                
            </tr>
            <tr>
                <th colspan="3">Subtotal</th>
                <th class="calcPrice"> @((Model.Price ?? 0).ToString("C"))</th>
            </tr>
            
            <tr>
                <th colspan="3">Tax</th>
                <th class="calcTax">
                    @(((Model.Price ?? 0) * .1m).ToString("C"))
                </th>
            </tr>
            <tr>
                <th colspan="3">Total</th>
                <th class="calcTotal">
                    @(((Model.Price ?? 0) * 1.1m).ToString("C"))
                </th>
            </tr>

        </tfoot>
    </table>
    <input type="submit" value="Update Frequency" class="btn btn-default"/>
    @Html.ActionLink("Check Out", "Index", "Checkout", null, new { @class = "btn btn-primary" })

    <h3>Date and Time of Service</h3>
    if (Model.Recurrence != null && Model.RecurrenceId.HasValue)
    {
        if (Model.Recurrence.Id == 2)
        {
            <div class="form-group">
                
                <div class="form-inline" style="margin-bottom:10px;">
                    @Html.LabelFor(m => m.Month, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Month, month, new { @class = "form-control" })
                    </div>
                <div class="form-inline" style="margin-bottom:10px; margin-left:15px;">
                    @Html.LabelFor(m => m.C_Date, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.C_Date, date, new { @class = "form-control" })
                    </div>
                <div class="form-inline">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label" })
                    @Html.DropDownListFor(m => m.Time, hour, new { @class = "form-control" }) O'Clock
                </div>
                </div>
            }
        if (Model.Recurrence.Id == 3)
        {
                <div class="form-group">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label" })
                    <div class="form-inline">
                        @Html.DropDownListFor(m => m.Month, month, new { @class = "form-control" })
                        @Html.DropDownListFor(m => m.Day_of_the_Week, day, new { @class = "form-control" })
                        @Html.DropDownListFor(m => m.Time, hour, new { @class = "form-control" })
                    </div>
                </div>}
        if (Model.Recurrence.Id == 4)
        {
                <div class="form-group">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label" })
                    <div class="form-inline">
                        @Html.DropDownListFor(m => m.C_Date, date, new { @class = "form-control" })
                        @Html.DropDownListFor(m => m.Time, hour, new { @class = "form-control" })
                    </div>
                </div>}
        if (Model.Recurrence.Id == 5)
        {
                <div class="form-group">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label" })
                    <div class="form-inline">
                        @Html.DropDownListFor(m => m.Day_of_the_Week, day, new { @class = "form-control" })
                        @Html.DropDownListFor(m => m.Time, hour, new { @class = "form-control" })
                    </div>
                </div>}
        if (Model.Recurrence.Id == 6)
        {
                <div class="form-group">
                    @Html.LabelFor(m => m.Time, new { @class = "control-label" })
                    <div class="form-inline">
                        @Html.DropDownListFor(m => m.Time, hour, new { @class = "form-control" })
                    </div>
                </div>}

    }
}
        

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $("document").ready(function () {
            $("#Recurrence").change(this, function () {
                var selectedIndex = $("#Recurrence").val();
                var selectedService;
                for (var i = 0; i < services.length; i++) {
                    if (services[i].ID == selectedIndex) {
                        selectedService = services[i];
                        break;
                    }
                }

                var multipliedPrice = selectedService.Price * selectedService.Multiplier;
                //var calculatedSavings = multipliedPrice * selectedservice.recurrence.savings;
                //var afterDiscountPrice = multipliedPrice - calculatedSavings;
                var calculatedTax = multipliedPrice * .10;
                var calculatedTotal = multipliedPrice + calculatedTax;


                $(".calcPrice").text("$" + multipliedPrice.toFixed(2));
                $(".calcSavings").text("$" + calculatedSavings.ToFixed(2));
                $(".calcTax").text("$" + calculatedTax.toFixed(2));
                $(".calcTotal").text("$" + calculatedTotal.toFixed(2));

            })
        })


        var services = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Service.ServiceRecurrences.Select(x => new { Name = x.Recurrence.Name, ID = x.RecurrenceID, Multiplier = x.PriceMultiplier, Price = x.Service.Price })))');
        </script>

    }